Nginx是lgor Sysoev为俄罗斯访问量第二的rambler.ru站点设计开发的。
Nginx功能丰富，可作为HTTP服务器，也可作为反向代理服务器，邮件服务器。支持FastCGI、SSL、Virtual Host、URL Rewrite、Gzip等功能。

·nginx的常用指令
	## 检查配置文件是否正确
		$ nginx -t 
		$ nginx -V     # 可以看到编译选项
	
	## 启动、关闭
		$ nginx        # 默认配置文件 conf/nginx.conf，-c 指定
		$ nginx -s stop
	或 pkill nginx
	
	## 重启，不会改变启动时指定的配置文件
		$ nginx -s reload


·Nginx常用功能
	1、Http代理，反向代理
	2、负载均衡
		Nginx提供的负载均衡策略有2种：内置策略和扩展策略。
			内置策略为轮询，加权轮询，Ip hash。
			扩展策略，就天马行空，只有你想不到的没有他做不到的啦
		·负载均衡的设定方法
			#设定负载均衡的服务器列表 支持多组的负载均衡,可以配置多个upstream  来服务于不同的Server.
    		#nginx 的 upstream 支持 几 种方式的分配 
    		#1)、轮询（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。 
    		#2)、weight 指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 跟上面样，指定了权重。
    		#3)、ip_hash 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 
    		#4)、fair       
    		#5)、url_hash #Urlhash
    		#upstream mysvr {
    		  #weigth参数表示权值，权值越高被分配到的几率越大   
    		  #1.down 表示单前的server暂时不参与负载
    		  #2.weight 默认为1.weight越大，负载的权重就越大。     
    		  #3.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。  
    		  #server 192.168.1.116  down;
    		  #server 192.168.1.116  backup;
    		  #server 192.168.1.121  weight=1;
    		  #server 192.168.1.122  weight=2;
    		#}
	3、web缓存
		Nginx可以对不同的文件做不同的缓存处理，配置灵活，并且支持FastCGI_Cache，主要用于对FastCGI的动态程序进行缓存。配合着第三方的ngx_cache_purge，对制定的URL缓存内容可以的进行增删管理。
·Nginx配置文件结构
	1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。

	2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。

	3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。

	4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。

	5、location块：配置请求的路由，以及各种页面的处理情况。




·nginx 模板注释介绍
		
	#user  nobody; #配置用户或者组，默认为nobody nobody。
	
	#进程数，初始可设置为cpu总核数
	worker_processes  1;  
	
	#全局错误日志及PID文件
	#error_log  logs/error.log;
	#error_log  logs/error.log  notice;
	#error_log  logs/error.log  info;
	
	#pid        logs/nginx.pid;    #指定nginx进程运行文件存放地址
	
	events {
	    worker_connections  1024;#单个worker进程最大连接数
	}
	
	#设定http服务器，利用它的反向代理功能提供负载均衡支持
	http {
	
	    #设定mime类型,类型由mime.type文件定义
	    include       mime.types; #文件扩展名与文件类型映射表
	    default_type  application/octet-stream; #默认文件类型 默认为text/plain
	    
	    #设定日志格式
	    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
	    #                  '$status $body_bytes_sent "$http_referer" '
	    #                  '"$http_user_agent" "$http_x_forwarded_for"';
	
	    #使用哪种格式的日志
	    access_log  logs/access.log  main;
	
	    sendfile        on; #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。
	    #tcp_nopush     on;
	
	    #keepalive_timeout  0;
	    keepalive_timeout  65; #连接超时时间，单位是秒
	
	    #gzip  on;
	
	
	    #设定负载均衡的服务器列表 支持多组的负载均衡,可以配置多个upstream  来服务于不同的Server.
	    #nginx 的 upstream 支持 几 种方式的分配 
	    #1)、轮询（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。 
	    #2)、weight 指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 跟上面样，指定了权重。
	    #3)、ip_hash 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 
	    #4)、fair       
	    #5)、url_hash #Urlhash
	    #upstream mysvr {
	      #weigth参数表示权值，权值越高被分配到的几率越大   
	      #1.down 表示单前的server暂时不参与负载
	      #2.weight 默认为1.weight越大，负载的权重就越大。     
	      #3.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。  
	      #server 192.168.1.116  down;
	      #server 192.168.1.116  backup;
	      #server 192.168.1.121  weight=1;
	      #server 192.168.1.122  weight=2;
	     # server localhost:8080;  
	    #}
	
	    #配置代理服务器的地址，即Nginx安装的服务器地址、监听端口、默认地址
	    server {
	        listen       8080;   #连接的端口号
	        
	        server_name  localhost;      
	
	        #对于server_name,如果需要将多个域名的请求进行反向代理，可以配置多个server_name来满足要求
	        keepalive_requests 120; #单连接请求上限次数。
	        
	        #charset koi8-r;
	
	        #access_log  logs/host.access.log  main;
	
	    #下面的就是你接收传输文件的格式要求了，根据你的需要来用，
	        location / {  #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。
	            root   html;    # 默认主页目录在nginx安装目录的html子目录。
	            index  index.html index.htm;  #设置默认页
	            autoindex on;
	            
	          # proxy_pass  http://mysvr;
	        }
	
	        #error_page  404              /404.html;
	
	        # redirect server error pages to the static page /50x.html
	        ## 定义错误提示页面
	        error_page   500 502 503 504  /50x.html;
	        location = /50x.html {
	            root   html;
	        }
	
	        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
	        #
	        #location ~ \.php$ {
	        #    proxy_pass   http://127.0.0.1;
	        #}
	
	        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	        #
	        #location ~ \.php$ {
	        #    root           html;
	        #    fastcgi_pass   127.0.0.1:9000;
	        #    fastcgi_index  index.php;
	        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
	        #    include        fastcgi_params;
	        #}
	
	        # deny access to .htaccess files, if Apache's document root
	        # concurs with nginx's one
	        #
	        #location ~ /\.ht {
	        #    deny  all;
	        #}
	    }
	
	
	    # another virtual host using mix of IP-, name-, and port-based configuration
	    #
	    #server {
	    #    listen       8000;
	    #    listen       somename:8080;
	    #    server_name  somename  alias  another.alias;
	
	    #    location / {
	    #        root   html;
	    #        index  index.html index.htm;
	    #    }
	    #}
	
	
	    # HTTPS server
	    #
	    #server {
	    #    listen       443 ssl;
	    #    server_name  localhost;
	
	    #    ssl_certificate      cert.pem;
	    #    ssl_certificate_key  cert.key;
	
	    #    ssl_session_cache    shared:SSL:1m;
	    #    ssl_session_timeout  5m;
	
	    #    ssl_ciphers  HIGH:!aNULL:!MD5;
	    #    ssl_prefer_server_ciphers  on;
	
	    #    location / {
	    #        root   html;
	    #        index  index.html index.htm;
	    #    }
	    #}
	
	}

	上面是nginx的基本配置，需要注意的有以下几点：

	1、在服务日志中，	
		1.$remote_addr 与$http_x_forwarded_for 用以记录客户端的ip地址；
		2.$remote_user ：用来记录客户端用户名称； 
		3.$time_local ： 用来记录访问时间与时区；
		4.$request ： 用来记录请求的url与http协议；
		5.$status ： 用来记录请求状态；成功是200， 
		6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；
		7.$http_referer ：用来记录从那个页面链接访问过来的； 
		8.$http_user_agent ：记录客户端浏览器的相关信息；
	2、惊群现象：一个网路连接到来，多个睡眠的进程被同事叫醒，但只有一个进程能获得链接，这样会影响系统性能。
	3、每个指令必须有分号结束。

·nginx配置常用指令详细说明
	main全局配置
		nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。

		woker_processes 2
		在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。

		worker_cpu_affinity
		也是写在main部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如worker_cpu_affinity 0001 0010 0100 1000; （四核）。

		worker_connections 2048
		写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。

		worker_rlimit_nofile 10240
		写在main部分。默认是没有设置，可以限制为操作系统最大的限制65535。

		use epoll
		写在events部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。
	
	http服务器
		与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。

	    sendfile on
	    开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。

	    keepalive_timeout 65 : 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。

	    send_timeout : 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。

	    client_max_body_size 10m
	    允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值
	    client_body_buffer_size 128k
	    缓冲区代理缓冲用户端请求的最大字节数

	模块http_proxy：
		这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能（另见文章）

	    proxy_connect_timeout 60
	    nginx跟后端服务器连接超时时间(代理连接超时)

	    proxy_read_timeout 60
	    连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)

	    proxy_buffer_size 4k
	    设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点

	    proxy_buffers 4 32k
	    proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均在32k以下的话，这样设置

	    proxy_busy_buffers_size 64k
	    高负荷下缓冲大小（proxy_buffers*2）

	    proxy_max_temp_file_size
	    当proxy_buffers放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与proxy_cache没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。

	    proxy_temp_file_write_size 64k
	    当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。

	模块http_gzip：

    	gzip on : 开启gzip压缩输出，减少网络传输。

        gzip_min_length 1k ： 
        设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。

        gzip_buffers 4 16k ： 
        设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。

        gzip_http_version 1.0 ： 
        用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。

        gzip_comp_level 6 ： 
        gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)
        gzip_types ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。

        gzip_proxied any ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。

        gzip_vary on ： 
        和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。
    server虚拟主机

		http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。

		    listen
		    监听端口，默认80，小于1024的要以root启动。可以为listen *:80、listen 127.0.0.1:80等形式。

		    server_name
		    服务器名，如localhost、www.example.com，可以通过正则匹配。

		模块http_stream
		这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，后端realserver以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。
	location

		http服务中，某些特定的URL对应的一系列配置项。

	    root /var/www/html
	    定义服务器的默认网站根目录位置。如果locationURL匹配的是子目录或文件，root没什么作用，一般放在server指令里面或/下。

	    index index.jsp index.html index.htm
	    定义路径下默认访问的文件名，一般跟着root放

	    proxy_pass http:/backend
	    请求转向backend定义的服务器列表，即反向代理，对应upstream负载均衡器。也可以proxy_pass http://ip:port。

	    proxy_redirect off;
	    proxy_set_header Host $host;
	    proxy_set_header X-Real-IP $remote_addr;
	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	    这四个暂且这样设，如果深究的话，每一个都涉及到很复杂的内容，也将通过另一篇文章来解读。

·windows下配置nginx的域名流程
	先设置server虚拟机,端口域名
			server {  
	 
	        listen     80; 
	        server_name  localhost;  
	        	        location / {  
	        root   C:\Users\Administrator\Desktop\zbh5;   #定义服务器的默认网站根目录位置  
	        index  index.html index.htm;    #定义首页索引文件的名称  
	        }  
	        #定义错误提示页面  
	        error_page   500 502 503 504  /50x.html;  
	        location = /50x.html {  
	            root   html;  
	        }  
	        #静态文件， Nginx 自己处理  
	        location ~ ^/(images|javascript|js|css|flash|media|static)/ {  
	        root C:\Users\Administrator\Desktop\zbh5;
	        #过期 30 天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点  
	        expires 30d;  
	       		}  
	        }  
		     server {  
		        listen       8080; 
		        server_name  test.nginx.com ;  
   		        location / {  
		            proxy_pass  http://127.0.0.1:80;
		            index  index.html index.htm;
		        } 
		    }

		    // 先搭建一个端口，名为localhost,用于连接页面数据(本地或服务器)，、
		    // 再创建一个新的端口，proxy_pass 连接前一个localhost端口地址，此时即可自定义域名。

	然后到C:\Windows\System32\drivers\etc\hosts  配置host
			127.0.0.1    test.nginx.com

	重启nginx服务器

	搭建一个server服务器
		例：开启8080端口
			var http = require('http');
			var fs = require('fs');
			var url = require('url');
			var path = require('path');
			var port = 8080;

			http.createServer(function (req, res) {
				var pathname = url.parse(req.url).pathname == "/" ? "/index.html" : url.parse(req.url).pathname;
				var filepath = path.join(__dirname, pathname);
				fs.readFile(filepath, function (err, file) {
					if (err) {
						console.log('请求失败：' + pathname);
						res.writeHead(404);
						res.end('404 NOT FOUND...');
					}else{
						console.log('请求成功：' + pathname);
						if (filepath.slice(filepath.lastIndexOf('.') - filepath.length) === '.css') {
							res.writeHead('200', {'Content-type': 'text/css'});
						} else {
							res.writeHead('200');
						}
						res.end(file);
					}
				});
			}).listen(port);

			console.log("服务已启动！端口：" + port);
		在server.js文件位置调用命令行 node server.js 开启端口
	若要手机端登陆域名，可用fiddler抓包



	