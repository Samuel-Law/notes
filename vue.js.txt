Vue.js
# 概念
	Vue.js是当下很火的一个JavaScriptMVVM库，它是以数据驱动和组件化的思想构建的。 

	MVVM模式
		ViewModel是Vue.js的核心，它是一个Vue实例。Vue实例是作用于某一个HTML元素上的，这个元素可以是HTML的body元素，也可以是指定了id的某个元素。
		从View侧看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据；
		从Model侧看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。 

	使用Vue的过程就是定义MVVM各个组成部分的过程的过程。
	    1. 定义View
	    2. 定义Model
	    3. 创建一个Vue实例或"ViewModel"，它用于连接View和Model

	    	<body>
		        <!--这是我们的View-->
		        <div id="app">
		            {{ message }}
		        </div>
		    </body>
		    <script src="js/vue.js"></script>
		    <script>
		        // 这是我们的Model
		        var exampleData = {
		            message: 'Hello World!'
		        }

		        // 创建一个 Vue 实例或 "ViewModel"
		        // 它连接 View 与 Model
		        new Vue({
		            el: '#app',
		            data: exampleData
		        })
		    </script>

	    在创建Vue实例时，需要传入一个选项对象，选项对象可以包含数据、挂载元素、方法、模生命周期钩子等等。
		在这个示例中，选项对象的el属性指向View，el: '#app'表示该Vue实例将挂载到<div id="app">...</div>这个元素；data属性指向Model，data: exampleData表示我们的Model是exampleData对象。
		Vue.js有多种数据绑定的语法，最基础的形式是文本插值，使用一对大括号语法，在运行时{{ message }}会被数据对象的message属性替换，所以页面上会输出"Hello World!"。

		可以在控制台用exampleData.message=""改写message内容
			
	双向绑定
		MVVM模式本身是实现了双向绑定的，在Vue.js中可以使用v-model指令在表单元素上创建双向数据绑定。
			<div id="app">
			    <p>{{ message }}</p>
			    <input type="text" v-model="message"/>
			</div>

		将message绑定到文本框，当更改文本框的值时，<p>{{ message }}</p> 中的内容也会被更新。

# 安装
	## 独立版本
		我们可以在 Vue.js 的官网上直接下载 vue.min.js 并用 <script> 标签引入。
	## NPM 方法
		$ npm install vue

		# 全局安装 vue-cli
		$ cnpm install --global vue-cli

		# 创建一个基于 webpack 模板的新项目
		$ vue init webpack my-project

		# 这里需要进行一些配置，默认回车即可


		进入项目，安装并运行：
		$ cd my-project
		$ cnpm install
		$ cnpm run dev

		成功执行以上命令后访问 http://localhost:8080/

# 语法
	插值
		数据绑定最常见的形式就是使用 {{...}}（双大括号）的文本插值：
			<div id="app">
			 	<p>{{ message }}</p>
			</div>

			<script>
			new Vue({
			 	el: '#app',
			 	data: {
			 	 	message: 'Hello Vue.js!'
			 	}
			})
			</script>

		使用 v-html 指令用于输出 html 代码：
			<div id="app">
			    <div v-html="message"></div>
			</div>
			    
			<script>
			new Vue({
			 	el: '#app',
			 	data: {
			 		message: '<h1>菜鸟教程</h1>'
			 	}
			})
			</script>

# Vue 要点
	构造器

		每个 Vue.js 应用都是通过构造函数 Vue 创建一个 Vue 的根实例来启动的：

			var vm = new Vue({
				// 选项
			})

	属性与方法

		每个 Vue 实例都会代理其 data 对象里所有的属性：

			var data = { a: 1 }
			var vm = new Vue({
				data: data
			})
			vm.a === data.a // -> true
			// 设置属性也会影响到原始数据
			vm.a = 2
			data.a // -> 2
			// ... 反之亦然
			data.a = 3
			vm.a // -> 3		
		
		除了 data 属性， Vue 实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 $，以便与代理的 data 属性区分。例如：

			var data = { a: 1 }
			var vm = new Vue({
				el: '#example',
				data: data
			})
			vm.$data === data // -> true
			vm.$el === document.getElementById('example') // -> true
			// $watch 是一个实例方法
			vm.$watch('a', function (newVal, oldVal) {
				// 这个回调将在 `vm.a`  改变后调用
			})

# Vue.js的常用指令
	Vue.js的指令是以v-开头的，它们作用于HTML元素，指令提供了一些特殊的特性，
	将指令绑定在元素上时，指令会为绑定的目标元素添加一些特殊的行为，
	我们可以将指令看作特殊的HTML特性（attribute）。

	Vue.js提供了一些常用的内置指令，接下来我们将介绍以下几个内置指令：
	
	· v-if指令
	· v-show指令
	· v-else指令
	· v-for指令
	· v-bind指令
	· v-on指令

	v-if指令
		v-if是条件渲染指令，它根据表达式的真假来删除和插入元素，它的基本语法如下：
		v-if="expression"
		expression是一个返回bool值的表达式，表达式可以是一个bool属性，也可以是一个返回bool的运算式。
			<body>
		        <div id="app">
		            <h1>Hello, Vue.js!</h1>
		            <h1 v-if="yes">Yes!</h1>
		            <h1 v-if="no">No!</h1>
		            <h1 v-if="age >= 25">Age: {{ age }}</h1>
		            <h1 v-if="name.indexOf('jack') >= 0">Name: {{ name }}</h1>
		        </div>
		    </body>
		    <script src="js/vue.js"></script>
		    <script>
		        
		        var vm = new Vue({
		            el: '#app',
		            data: {
		                yes: true,
		                no: false,
		                age: 28,
		                name: 'keepfool'
		            }
		        })
		    </script>
		这段代码使用了4个表达式：

		    -数据的yes属性为true，所以"Yes!"会被输出；
		    -数据的no属性为false，所以"No!"不会被输出；
		    -运算式age >= 25返回true，所以"Age: 28"会被输出；
		    -运算式name.indexOf('jack') >= 0返回false，所以"Name: keepfool"不会被输出。

		注意：v-if指令是根据条件表达式的值来执行元素的插入或者删除行为。
		v-if值为flase的元素会被直接删除，不会渲染到HTML上。

		用vm.age等可以访问data所有属性。

		每个Vue实例都会代理其选项对象里的data属性。
		因此age是定义在选项对象的data属性中的，Vue实例可以直接访问。

	v-show指令
		v-show也是条件渲染指令，和v-if指令不同的是，
		使用v-show指令的元素始终会被渲染到HTML，它只是简单地为元素设置CSS的style属性。 
			<body>
		        <div id="app">
		            <h1>Hello, Vue.js!</h1>
		            <h1 v-show="yes">Yes!</h1>
		            <h1 v-show="no">No!</h1>
		            <h1 v-show="age >= 25">Age: {{ age }}</h1>
		            <h1 v-show="name.indexOf('jack') >= 0">Name: {{ name }}</h1>
		        </div>
		    </body>
		    <script src="js/vue.js"></script>
		    <script>
		        
		        var vm = new Vue({
		            el: '#app',
		            data: {
		                yes: true,
		                no: false,
		                age: 28,
		                name: 'keepfool'
		            }
		        })
		    </script>

		这段代码跟v-if一样使用了4个表达式：

		    -数据的yes属性为true，所以"Yes!"会被输出；
		    -数据的no属性为false，所以"No!"不会被输出；
		    -运算式age >= 25返回true，所以"Age: 28"会被输出；
		    -运算式name.indexOf('jack') >= 0返回false，所以"Name: keepfool"不会被输出。

		注意：用vm.age更改age属性，使得表达式age >= 25的值为false，
			  可以看到<h1>Age: 24</h1>元素被设置了style="display:none"样式，而非删除元素。

	v-else指令
		可以用v-else指令为v-if或v-show添加一个“else块”。v-else元素必须立即跟在v-if或v-show元素的后面——否则它不能被识别。

		 	<h1 v-if="age >= 25">Age: {{ age }}</h1>
            <h1 v-else>Name: {{ name }}</h1>
        当v-if为true时，不会触发后面的v-else，且不被渲染;
        当v-if为false时，渲染v-else的元素；
        注意！当v-show为true时，后面v-else被渲染，但display=none

	v-else-if
	v-else-if 在 2.1.0 新增，顾名思义，用作 v-if 的 else-if 块。可以链式的多次使用

		<div id="app">
	    <div v-if="type === 'A'">
	      A
	    </div>
	    <div v-else-if="type === 'B'">
	      B
	    </div>
	    <div v-else-if="type === 'C'">
	      C
	    </div>
	    <div v-else>
	      Not A/B/C
	    </div>
	</div>
	
	v-for
		v-for指令基于一个数组渲染一个列表，它和JavaScript的遍历语法相似：
			v-for="item in items"
		items是一个数组，item是当前被遍历的数组元素。

			<table>
                <tr v-for="person in people">
                    <td>{{ person.name  }}</td>
                    <td>{{ person.age  }}</td>
                    <td>{{ person.sex  }}</td>
                    </tr>
            </table>
			<script src="js/vue.js"></script>
		    <script>
		        var vm = new Vue({
		            el: '#app',
		            data: {
		                people: [{
		                    name: 'Jack',
		                    age: 30,
		                    sex: 'Male'
		                }, {
		                    name: 'Bill',
		                    age: 26,
		                    sex: 'Male'
		                }, {
		                    name: 'Tracy',
		                    age: 22,
		                    sex: 'Female'
		                }, {
		                    name: 'Chris',
		                    age: 36,
		                    sex: 'Male'
		                }]
		            }
		        })
		    </script>
		我们在选项对象的data属性中定义了一个people数组，
		然后在#app元素内使用v-for遍历people数组，输出每个person对象的姓名、年龄和性别。
		
	v-bind指令
	 	HTML 属性中的值应使用 v-bind 指令。
			v-bind:class="{'class1': class1}"
		判断 class1 的值，如果为 true 使用 class1 类的样式，否则不使用该类
		
		v-bind指令可以在其名称后面带一个参数，中间放一个冒号隔开，
		这个参数通常是HTML元素的特性（attribute），

		例如：v-bind:class

		下面这个例子构建了一个简单的页码条，v-bind指令作用于元素的class特性上。
		这个指令包含一个表达式，表达式的含义是：高亮当前页(active)。
			<div id="app">
	            <ul class="pagination">
	                <li v-for="n in pageCount">
	                    <a href="javascripit:void(0)" v-bind:class="activeNumber === n + 1 ? 'active' : ''">{{ n + 1 }}</a>
	                </li>
	            </ul>
	        </div>
	        <script src="js/vue.js"></script>
		    <script>
		        var vm = new Vue({
		            el: '#app',
		            data: {
		                activeNumber: 1,
		                pageCount: 10
		            }
		        })
		    </script>
		v-for="n in pageCount" 表示pageCount是一个整数，遍历时n从0开始，然后遍历到pageCount=10之后结束
		v-bind:class="activeNumber === n + 1 ? 'active' : ''" 则是一个经典的三目运算。

	v-on
		v-on指令用于给监听DOM事件，它的用语法和v-bind是类似的，例如监听<a>元素的点击事件：
			<a v-on:click="doSomething">
		有两种形式调用方法：绑定一个方法（让事件指向方法的引用），或者使用内联语句。
		Greet按钮将它的单击事件直接绑定到greet()方法，而Hi按钮则是调用say()方法。
			<button v-on:click="greet">Greet</button>
			<button v-on:click="say('Hi')">Hi</button>
			<script src="js/vue.js"></script>
			<script>
			    var vm = new Vue({
			        el: '#app',
			        data: {
			            message: 'Hello, Vue.js!'
			        },
			        // 在 `methods` 对象中定义方法
			        methods: {
			            greet: function() {
			                // // 方法内 `this` 指向 vm
			                alert(this.message)
			            },
			            say: function(msg) {
			                alert(msg)
			            }
			        }
			    })
			</script>
		用v-on：click调用点击事件，再在下方Vue实例中，定义methods对象，在其中定义方法。

	v-bind与v-on的缩写
		Vue.js为最常用的两个指令v-bind和v-on提供了缩写方式。v-bind指令可以缩写为一个冒号，v-on指令可以缩写为@符号。
		如：
			<!--完整语法-->
			<a href="#" v-bind:class="number">{{ n + 1 }}</a>
			<!--缩写语法-->
			<a href="#" :class="number">{{ n + 1 }}</a>

			<!--完整语法-->
			<button v-on:click="greet">Greet</button>
			<!--缩写语法-->
			<button @click="greet">Greet</button>

	Vue.js 计算属性

		computed

			反转字符串的例子

				<div id="app">
				 	<p>原始字符串: {{ message }}</p>
				 	<p>计算后反转字符串: {{ reversedMessage }}</p>
				</div>
				 
				<script>
				var vm = new Vue({
				 	el: '#app',
				 	data: {
				   		message: 'Runoob!'
				  	},
					computed: {
				    // 计算属性的 getter
				    	reversedMessage: function () {
				    	// `this` 指向 vm 实例
				    		return this.message.split('').reverse().join('')
				    	}
				  	}
				})
				</script>
			
			例子中声明了一个计算属性 reversedMessage 。
			提供的函数将用作属性 vm.reversedMessage 的 getter 。
			vm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新。

		methods

			我们可以使用 methods 来替代 computed，效果上两个都是一样的，
			但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。
			而使用 methods ，在重新渲染的时候，函数总会重新调用执行。 

			可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。

		computed setter

			computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ： 

				var vm = new Vue({
				  	el: '#app',
				  	data: {
				    	name: 'Google',
				    	url: 'http://www.google.com'
				  	},
				  	computed: {
					    site: {
				    	// getter
				    	get: function () {
				        	return this.name + ' ' + this.url
				      	},
				     	// setter
				     	set: function (newValue) {
				     		var names = newValue.split(' ')
				       	this.name = names[0]
				   	    this.url = names[names.length - 1]
				   	   		}
				   		}
				  	}
				})
				// 调用 setter， vm.name 和 vm.url 也会被对应更新
				vm.site = 'www.baidu.com';
				document.write('name: ' + vm.name);
				document.write('<br>');
				document.write('url: ' + vm.url);
			
	Vue.js 样式绑定

		class 属性绑定

			例子中将 isActive 设置为 true 显示了.red的样式，如果设置为 false 则不显示
			
			(也可以在对象中传入更多属性用来动态切换多个 class)
				<div id="app">
					<div v-bind:class="{ 'red': isActive, 'text-danger': hasError }"></div>
				</div>

				<script>
				new Vue({
				 	el: '#app',
				 	data: {
				 	  	isActive: true,
				 	  	hasError：true
				 	}
				})
				</script>
		
			我们也可以把一个数组传给 v-bind:class 

				<div id="app">
					<div v-bind:class="[activeClass, errorClass]"></div>
				</div>

				<script>
				new Vue({
					el: '#app',
					data: {
						activeClass: 'active',
						errorClass: 'text-danger'
					}
				})
				</script>

		Vue.js style(内联样式)

			我们可以在 v-bind:style 直接设置样式：

				<div id="app">
				    <div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }">菜鸟教程</div>
				</div>

			也可以直接绑定到一个样式对象，让模板更清晰

				<div id="app">
				  <div v-bind:style="styleObject">菜鸟教程</div>
				</div>
	
			或使用数组将多个样式对象应用到一个元素上

			（注意：当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀。）



	