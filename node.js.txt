NodeJs
·概念
	
	Node.js不是JS应用、而是JS运行平台
		Node.js不是一个Javascript应用，而是采用C++语言编写而成，是一个Javascript的运行环境。
	​ 	提到Javascript，大家首先想到的是日常使用的浏览器，现代浏览器包含了各种组件，包括渲染引擎、JavaScript引擎等，
		其中Javascript引擎负责解释执行网页中的Javascript代码。
		作为Web前端最重要的语言之一，Javascript一直是前端工程师的专利。
		不过，Node.js是一个后端的Javascript运行环境（支持的系统包括Linux、Windows），这意味着你可以编写系统级或者服务器端的Javascript代码，交给Node.js来解释执行，
	 Node.js与JavaScript的关系
​ 		JavaScript包括3个部分：ECMAScript-262、BOM、DOM。BOM与浏览器相关，DOM和HTML页面相关。
		Node.js中只是包括了ECMAScript-262。所以我们以前的一些关于BOM的操作和DOM的操作都是基于浏览器端运行的，在Node.js中是无法使用的。
	
	Node.js中几个全局变量
	    global：
	    	表示Node所在的全局环境，类似于浏览器的window对象。需要注意的是，如果在浏览器中声明一个全局变量，实际上是声明了一个全局对象的属性，比如var x = 1等同于设置window.x = 1，但是Node不是这样，至少在模块中不是这样（REPL环境的行为与浏览器一致）。在模块文件中，声明var x = 1，该变量不是global对象的属性，global.x等于undefined。这是因为模块的全局变量都是该模块私有的，其他模块无法取到。
	    process：
	    	该对象表示Node所处的当前进程，允许开发者与该进程互动。
	    console：
	    	指向Node内置的console模块，提供命令行环境中的标准输入、标准输出功能。

	Node.js中的几个全局函数
	    setTimeout()：
	    	用于在指定毫秒之后，运行回调函数。实际的调用间隔，还取决于系统因素。间隔的毫秒数在1毫秒到2,147,483,647毫秒（约24.8天）之间。如果超过这个范围，会被自动改为1毫秒。该方法返回一个整数，代表这个新建定时器的编号。
	    clearTimeout()：
	    	用于终止一个setTimeout方法新建的定时器。
	    setInterval()：
	    	用于每隔一定毫秒调用回调函数。由于系统因素，可能无法保证每次调用之间正好间隔指定的毫秒数，但只会多于这个间隔，而不会少于它。指定的毫秒数必须是1到2,147,483,647（大约24.8天）之间的整数，如果超过这个范围，会被自动改为1毫秒。该方法返回一个整数，代表这个新建定时器的编号。
	    clearInterval()：
	    	终止一个用setInterval方法新建的定时器。
	    require()：、
	    	用于加载模块。
	    Buffer()：
	    	用于操作二进制数据。
	Node.js的核心模块
		如果只是在服务器运行JavaScript代码，用处并不大，因为服务器脚本语言已经有很多种了。Node.js的用处在于，它**本身**还提供了一系列功能模块，与操作系统互动。这些核心的功能模块，不用安装就可以使用，下面是它们的清单。
		    ·http：提供HTTP服务器功能。
		    ·url：解析URL。
		    ·fs：与文件系统交互。
		    ·querystring：解析URL的查询字符串。
		    ·child_process：新建子进程。
		    ·util：提供一系列实用小工具。
		    ·path：处理文件路径。
		    ·crypto：提供加密和解密功能，基本上是对OpenSSL的包装。

·包描述文件与NPM
	包描述文件是一个json格式的文件 —— package.json ,用于表达非代码相关的信息，
	位于包的根目录下，是包的重要组成部分。NPM的所有行为都与包描述文件息息相关。
	CommomJS为 package.json文件定义了一些必须的字段
		name 包名。规范定义它需要由小写字母和数字组成，可以包含.、_、和-，但不允许空格。
			       包名是唯一的！
		descriotion 包简介
		version 版本号
		keywords 关键词数组。
		maintainers 包维护列表

·express
	安装与调用
		创建一个项目目录，进入该目录，创建一个 package.json文件，文件内容如下：
			{
			  "name": "Node_Hello",
			  "description": "nodejs hello world app",
			  "version": "0.0.1",
			  "private": true,
			  "dependencies": {
			   "express": "4.x"
			  }
			}
		ps:上面代码定义了项目的名称、描述、版本等，并且指定需要 4.0版本以上的Express。

		==从控制台首先进入刚才的项目目录==，然后输入	-npm install-	命令，则会开始下载Express。

		==创建启动文件==	​在上面的项目目录下，新建一个启动文件，名字暂叫 ==index.js== 。代码例子如下：

			var express = require('express');
			var app = express();
			app.get('/', function (req, res) {
			  res.send('<h1>你好，这是我们的第一个nodejs项目</h1>');
			});
			app.listen(8080);

		==运行index.js文件==	输入命令 -node index.js-
		即可使用浏览器访问刚刚搭建的网页了。	"http://127.0.0.1:8080"

		==打开目录下文件== 代码例子如下

			var express = require('express');
			var app = express();
			app.use(express.static(__dirname + '/public'));
			app.listen(8080);
		
		ps: 现在就可以访问	"http://localhost:8080"
			它会在浏览器中打开当前目录的public子目录（严格来说，是打开public目录的index.html文件）。
			如果public目录之中有一个图片文件my_image.png，那么可以用 "http://localhost:8080/my_image.png"  访问该文件。3
	
	app.js 模板注释介绍
		//加载模块
		var express = require('express');
		var path = require('path');
		var favicon = require('serve-favicon');
		var logger = require('morgan');
		var cookieParser = require('cookie-parser');
		var bodyParser = require('body-parser');
		//加载路由文件
		var index = require('./routes/index');
		var users = require('./routes/users');

		// 生产一个express的实例
		var app = express();

		// view engine setup
		/*
		设置 views 文件夹为存放视图文件的目录,
		即存放模板文件的地方,__dirname 为全局变量,
		存储当前正在执行的脚本所在的目录。
		 */
		app.set('views', path.join(__dirname, 'views'));
		//设置模板引擎为ejs
		app.set('view engine', 'ejs');

		// uncomment after placing your favicon in /public
		//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
		//加载日志中间件
		app.use(logger('dev'));
		//加载解析json的中间件
		app.use(bodyParser.json());
		//加载解析urlencoded请求体的中间件。  post请求
		app.use(bodyParser.urlencoded({extended: false}));
		//加载解析cookie的中间件
		app.use(cookieParser());
		//设置public文件夹为放置静态文件的目录
		app.use(express.static(path.join(__dirname, 'public')));

		// 路由控制器。
		app.use('/', index);  // http://localhost:3000
		app.use('/users', users);   //http://localhost:3000/users


		// catch 404 and forward to error handler
		app.use(function (req, res, next) {
		    var err = new Error('Not Found');
		    err.status = 404;
		    next(err);
		});

		// error handler
		app.use(function (err, req, res, next) {
		    // set locals, only providing error in development
		    res.locals.message = err.message;
		    res.locals.error = req.app.get('env') === 'development' ? err : {};

		    // render the error page
		    res.status(err.status || 500);
		    res.render('error');
		});

		//把app导出。  别的地方就可以通过 require("app") 获取到这个对象
		module.exports = app;

	app.get 方法
		启动脚本 index.js 的 app.get 方法，用于指定不同的访问路径所对应的回调函数，
		这叫做“路由”（routing）。上面代码只指定了根目录的回调函数，因此只有一个路由记录。实际应用中，可能有多个路由记录。
			// index.js
			var express = require('express');
			var app = express();

			app.get('/', function (req, res) {
			  res.send('Hello world!');
			});
			app.get('/customer', function(req, res){
			  res.send('customer page');
			});
			app.get('/admin', function(req, res){
			  res.send('admin page');
			});

			app.listen(3000);
		这时，应把路由放到一个单独的文件中，比如新建一个routes子目录。
			// routes/index.js
			module.exports = function (app) {
			  app.get('/', function (req, res) {
			    res.send('Hello world');
			  });
			  app.get('/customer', function(req, res){
			    res.send('customer page');
			  });
			  app.get('/admin', function(req, res){
			    res.send('admin page');
			  });
			};
		然后原来的 index.js 变成
			// index.js
			var express = require('express');
			var app = express();
			var routes = require('./routes')(app);
			app.listen(3000);
	
	运行原理
		底层http模块
			Express框架建立在 node.js内置的http模块上。http模块生成服务器的原始代码如下。
				var http = require("http");

				var app = http.createServer(function(request, response) {
				  response.writeHead(200, {"Content-Type": "text/plain"});
				  response.end("Hello world!");
				});

				app.listen(3000, "localhost");
			上面代码的关键是http模块的createServer方法，表示生成一个HTTP服务器实例。
			该方法接受一个回调函数，该回调函数的参数，分别为代表HTTP请求和HTTP回应的request对象和response对象。
			
			Express框架的核心是对http模块的再包装。上面的代码用Express改写如下。
				var express = require('express');
				var app = express();

				app.get('/', function (req, res) {
				  res.send('Hello world!');
				});

				app.listen(3000);

			比较两段代码，可以看到它们非常接近。
			原来是用 http.createServer 方法新建一个app实例，现在则是用Express的构造方法，生成一个Epress实例。
			两者的回调函数都是相同的。Express框架等于在http模块之上，加了一个中间层。
		
		中间件
			中间件（middleware）就是处理HTTP请求的函数。
			它最大的特点就是，一个中间件处理完，再传递给下一个中间件。App实例在运行过程中，会调用一系列的中间件。
			每个中间件可以从App实例，接收三个参数，依次为request对象（代表HTTP请求）、response对象（代表HTTP回应），next回调函数（代表下一个中间件）。
			每个中间件都可以对HTTP请求（request对象）进行加工，并且决定是否调用next方法，将request对象再传给下一个中间件。
			一个不进行任何操作、只传递request对象的中间件，就是下面这样。
				function uselessMiddleware(req, res, next) {
				  next();
				}
			上面代码的next就是下一个中间件。如果它带有参数，则代表抛出一个错误，参数为错误文本。
				function uselessMiddleware(req, res, next) {
				  next('出错了！');
				}
			抛出错误以后，后面的中间件将不再执行，直到发现一个错误处理函数为止。
	use方法
		use是express注册中间件的方法，它返回一个函数。下面是一个连续调用两个中间件的例子。
			var express = require("express");
			var http = require("http");

			var app = express();

			app.use(function(request, response, next) {
			  console.log("In comes a " + request.method + " to " + request.url);
			  next();
			});

			app.use(function(request, response) {
			  response.writeHead(200, { "Content-Type": "text/plain" });
			  response.end("Hello world!\n");
			});

			http.createServer(app).listen(1337);

		上面代码使用 app.use方法，注册了两个中间件。
		收到HTTP请求后，先调用第一个中间件，在控制台输出一行信息，然后通过next方法，将执行权传给第二个中间件，输出HTTP回应。
		由于第二个中间件没有调用next方法，所以request对象就不再向后传递了。

		use方法内部可以对访问路径进行判断，据此就能实现简单的路由，根据不同的请求网址，返回不同的网页内容。
			var express = require("express");
			var http = require("http");

			var app = express();

			app.use(function(request, response, next) {
			  if (request.url == "/") {
			    response.writeHead(200, { "Content-Type": "text/plain" });
			    response.end("Welcome to the homepage!\n");
			  } else {
			    next();
			  }
			});

			app.use(function(request, response, next) {
			  if (request.url == "/about") {
			    response.writeHead(200, { "Content-Type": "text/plain" });
			  } else {
			    next();
			  }
			});

			app.use(function(request, response) {
			  response.writeHead(404, { "Content-Type": "text/plain" });
			  response.end("404 error!\n");
			});

			http.createServer(app).listen(1337);
		上面代码通过 request.url 属性，判断请求的网址，从而返回不同的内容。
		注意，app.use方法一共登记了三个中间件，只要请求路径匹配，就不会将执行权交给下一个中间件。
		因此，最后一个中间件会返回404错误，即前面的中间件都没匹配请求路径，找不到所要请求的资源。

		除了在回调函数内部判断请求的网址，use方法也允许将请求网址写在第一个参数。
		这代表，只有请求路径匹配这个参数，后面的中间件才会生效。无疑，这样写更加清晰和方便。
		上面的代码可以写成：
			var express = require("express");
			var http = require("http");

			var app = express();

			app.use("/home", function(request, response, next) {
			  response.writeHead(200, { "Content-Type": "text/plain" });
			  response.end("Welcome to the homepage!\n");
			});

			app.use("/about", function(request, response, next) {
			  response.writeHead(200, { "Content-Type": "text/plain" });
			  response.end("Welcome to the about page!\n");
			});

			app.use(function(request, response) {
			  response.writeHead(404, { "Content-Type": "text/plain" });
			  response.end("404 error!\n");
			});

			http.createServer(app).listen(1337);
	all方法和HTTP动词方法
		针对不同的请求，Express提供了use方法的一些别名。比如，上面代码也可以用别名的形式来写。
			var express = require("express");
			var http = require("http");
			var app = express();

			app.all("*", function(request, response, next) {
			  response.writeHead(200, { "Content-Type": "text/plain" });
			  next();
			});

			app.get("/", function(request, response) {
			  response.end("Welcome to the homepage!");
			});

			app.get("/about", function(request, response) {
			  response.end("Welcome to the about page!");
			});

			app.get("*", function(request, response) {
			  response.end("404!");
			});

			http.createServer(app).listen(1337);
		
		上面代码的all方法表示，所有请求都必须通过该中间件，参数中的“*”表示对所有路径有效。
		get方法则是只有GET动词的HTTP请求通过该中间件，它的第一个参数是请求的路径。
		由于get方法的回调函数没有调用next方法，所以只要有一个中间件被调用了，后面的中间件就不会再被调用了。

		除了get方法以外，Express还提供post、put、delete方法，即HTTP动词都是Express的方法。

		这些方法的第一个参数，都是请求的路径。除了绝对匹配以外，Express允许模式匹配。
			app.get("/hello/:who", function(req, res) {
			  res.end("Hello, " + req.params.who + ".");
			});

		上面代码将匹配 “/hello/alice” 网址，网址中的alice将被捕获，作为 req.params.who属性的值。
		需要注意的是，捕获后需要对网址进行检查，过滤不安全字符，上面的写法只是为了演示，生产中不应这样直接使用用户提供的值。
		如果在模式参数(who)后面加上问号，表示该参数可选。

	set方法
		set方法用于指定变量的值。

			app.set("views", __dirname + "/views");

			app.set("view engine", "jade");

		上面代码使用set方法，为系统变量“views”和“view engine”指定值。


	response对象
		（1）response.redirect方法

			response.redirect方法允许网址的重定向。

				response.redirect("/hello/anime");
				response.redirect("http://www.example.com");
				response.redirect(301, "http://www.example.com"); 

		（2）response.sendFile方法

			response.sendFile方法用于发送文件。

				response.sendFile("/path/to/anime.mp4");

		（3）response.render方法

			response.render方法用于渲染网页模板。

				app.get("/", function(request, response) {
				  response.render("index", { message: "Hello World" });
				});

			上面代码使用render方法，将message变量传入index模板，渲染成HTML网页。
	requst对象

		（1）request.ip

			request.ip属性用于获得HTTP请求的IP地址。

		（2）request.files

			request.files用于获取上传的文件。

	搭建HTTPs服务器
		使用Express搭建HTTPs加密服务器，也很简单。
			var fs = require('fs');
			var options = {
			  key: fs.readFileSync('E:/ssl/myserver.key'),
			  cert: fs.readFileSync('E:/ssl/myserver.crt'),
			  passphrase: '1234'
			};

			var https = require('https');
			var express = require('express');
			var app = express();

			app.get('/', function(req, res){
			  res.send('Hello World Expressjs');
			});

			var server = https.createServer(options, app);
			server.listen(8084);
			console.log('Server is running on port 8084');

	编写启动脚本
		上面使用express命令自动建立项目，也可以不使用这个命令，手动新建所有文件。
		先建立一个项目目录（假定这个目录叫做demo）。进入该目录，新建一个 package.json文件，写入项目的配置信息。
			{
			   "name": "demo",
			   "description": "My First Express App",
			   "version": "0.0.1",
			   "dependencies": {
			   "express": "3.x"
			   }
			}
		在项目目录中，新建文件 app.js。项目的代码就放在这个文件里面。
			var express = require('express');
			var app = express();
		上面代码首先加载express模块，赋给变量express。然后，生成express实例，赋给变量app。

		接着，设定express实例的参数。
			// 设定port变量，意为访问端口
			app.set('port', process.env.PORT || 3000);

			// 设定views变量，意为视图存放的目录
			app.set('views', path.join(__dirname, 'views'));

			// 设定view engine变量，意为网页模板引擎
			app.set('view engine', 'jade');

			app.use(express.favicon());
			app.use(express.logger('dev'));
			app.use(express.bodyParser());
			app.use(express.methodOverride());
			app.use(app.router);

			// 设定静态文件目录，比如本地文件
			// 目录为demo/public/images，访问
			// 网址则显示为http://localhost:3000/images
			app.use(express.static(path.join(__dirname, 'public')));

		上面代码中的set方法用于设定内部变量，use方法用于调用express的中间件。

		最后，调用实例方法listen，让其监听事先设定的端口（3000）。
			app.listen(app.get('port'));
		这时，运行 -node app.js- 命令，就可以在浏览器访问"http://127.0.0.1:3000" 

		网页提示“Cannot GET /”，表示没有为网站的根路径指定可以显示的内容。所以，下一步就是配置路由。

	配置路由
		所谓“路由”，就是指为不同的访问路径，指定不同的处理方法。

		（1）指定根路径

			在 app.js之中，先指定根路径的处理方法。

				app.get('/', function(req, res) {
				   res.send('Hello World');
				});

			上面代码的get方法，表示处理客户端发出的GET请求。
			相应的，还有app.post、app.put、app.del（delete是JavaScript保留字，所以改叫del）方法。

			get方法的第一个参数是访问路径，正斜杠（/）就代表根路径；
			第二个参数是回调函数，它的req参数表示客户端发来的HTTP请求，res参数代表发向客户端的HTTP回应，这两个参数都是对象。
			在回调函数内部，使用HTTP回应的send方法，表示向浏览器发送一个字符串。然后，运行 -node app.js- 命令。



			此时，在浏览器中访问 "http://127.0.0.1:3000"，网页就会显示“Hello World”。

			如果需要指定HTTP头信息，回调函数就必须换一种写法，要使用setHeader方法与end方法。

				app.get('/', function(req, res){
				  var body = 'Hello World';
				  res.setHeader('Content-Type', 'text/plain');
				  res.setHeader('Content-Length', body.length);
				  res.end(body);
				});

		（2）指定特定路径

				上面是处理根目录的情况，下面再举一个例子。假定用户访问/api路径，希望返回一个JSON字符串。这时，get可以这样写。

					app.get('/api', function(request, response) {
					   response.send({name:"张三",age:40});
					});

					上面代码表示，除了发送字符串，send方法还可以直接发送对象。重新启动node以后，再访问路径/api，浏览器就会显示一个JSON对象。

					{
					  "name": "张三",
					  "age": 40
					}

				我们也可以把 app.get的回调函数，封装成模块。先在routes目录下面建立一个 api.js文件。

					// routes/api.js

					exports.index = function (req, res){
					  res.json(200, {name:"张三",age:40});
					}

				然后，在 app.js中加载这个模块。

					// app.js

					var api = require('./routes/api');
					app.get('/api', api.index);

				现在访问时，就会显示与上一次同样的结果。

				如果只向浏览器发送简单的文本信息，上面的方法已经够用；但是如果要向浏览器发送复杂的内容，还是应该使用网页模板。

	静态网页模板

		在项目目录之中，建立一个子目录views，用于存放网页模板。

		假定这个项目有三个路径：根路径（/）、自我介绍（/about）和文章（/article）。那么，app.js可以这样写：

			var express = require('express');
			var app = express();
			 
			app.get('/', function(req, res) {
			   res.sendfile('./views/index.html');
			});
			 
			app.get('/about', function(req, res) {
			   res.sendfile('./views/about.html');
			});
			 
			app.get('/article', function(req, res) {
			   res.sendfile('./views/article.html');
			});
			 
			app.listen(3000);

		上面代码表示，三个路径分别对应views目录中的三个模板：index.html、about.html和article.html。
		另外，向服务器发送信息的方法，从send变成了sendfile，后者专门用于发送文件。

		假定 index.html的内容如下：

			<html>
			<head>
			   <title>首页</title>
			</head>
			 
			<body>
			<h1>Express Demo</h1>
			 
			<footer>
			<p>
			   <a href="/">首页</a> - <a href="/about">自我介绍</a> - <a href="/article"">文章</a>
			</p>
			</footer>
			 
			</body>
			</html>
			/////
		上面代码是一个静态网页。如果想要展示动态内容，就必须使用动态网页模板。
	
	

	新建页面（添加页面）
		只需三步，1添加一个html文件，2添加三行代码，3添加一行代码。
		 1，（views-V）例如我想添加一个 about.html页面，首先在在views文件下，添加 about.html页面.
		 2，统一在routes下的 index.js中配置页面的请求路由，也就是请求映射处理。
		 	只有在需要情况下，才新建新的路由文件
			两种方法：
		 		//方法一
		 		router.get('/about', function(req, res) {
   				res.sendfile('./views/about.html');
				});  
		 		//方法二
				router.get('/about', function(req, res, next) {
				res.render('about', { title: 'about' });
				});
	    	这里res.render('about'...对应的就是views中的 about.html文件。
	    	router.get('/about'...对应的是 app.js中添加代码的名称
	   	3，app.js文件中，只需要添加一行代码即可，作用白话说就是程序入口关联控制器。
    			app.use('/about',routes);  //添加到app.use('/', routes);下边
    		routes就是var routes = require('./routes/index');，即关联routes下的 index.js文件。
    		这里/about和上边控制器中的 /about 是对应的，即对外客户访问的页面名称，可以随意写，返回的是 about.html页面。

    指定静态文件目录
    	模板文件默认存放在views子目录。
    	这时，如果要在网页中加载静态文件（比如样式表、图片等），就需要另外指定一个存放静态文件的目录。
    		app.use(express.static('public'));
    	上面代码在文件 app.js之中，指定静态文件存放的目录是public。
    	于是，当浏览器发出非HTML文件请求时，服务器端就到public目录寻找这个文件。

    动态网站建设，此处调用XTemplate

